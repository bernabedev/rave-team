---
const svgInstancesData = [
  { top: "10%", left: "15%", opacity: "0.8", depth: 0.1, idSuffix: "1" },
  { top: "75%", left: "20%", opacity: "0.5", depth: 0.15, idSuffix: "2" },
  { top: "70%", left: "50%", opacity: "0.9", depth: 0.12, idSuffix: "3" },
  { top: "25%", left: "80%", opacity: "0.6", depth: 0.18, idSuffix: "4" },
  { top: "85%", left: "70%", opacity: "0.7", depth: 0.16, idSuffix: "5" },
];
---

<div
  class="relative w-full h-screen overflow-hidden"
  id="parallax-hero-container"
>
  <div
    class="absolute h-[105%] top-[calc(1rem-2.5%)] left-[-2.5%] w-[105%] parallax-layer"
    data-depth="0.05"
    style="transform: translate(0px, 0px); transition: transform 0.1s ease-out;"
  >
    <img
      alt="Elementos en primer plano"
      decoding="async"
      data-nimg="fill"
      style="position: absolute; height: 100%; width: 100%; inset: 0px; object-fit: cover; color: transparent;"
      src="/images/subtract.png"
    />
  </div>

  <div
    class="absolute parallax-layer"
    data-depth="0.2"
    style="left: 20%; top: 5%; transition: transform 0.2s ease-out;"
    id="blue-layer"
  >
    <img
      alt="Elemento azul"
      loading="lazy"
      width="253"
      height="276"
      decoding="async"
      data-nimg="1"
      class="select-none pointer-events-none"
      style="color: transparent; object-fit: contain;"
      src="/images/mask-group-2.png"
    />
  </div>
  <div
    class="absolute parallax-layer"
    data-depth="0.3"
    style="left: 70%; top: 25%;  transition: transform 0.2s ease-out;"
    id="cyan-layer"
  >
    <img
      alt="Elemento cian"
      loading="lazy"
      width="120"
      height="150"
      decoding="async"
      data-nimg="1"
      class="select-none pointer-events-none"
      style="color: transparent; object-fit: contain;"
      src="/images/mask-group.png"
    />
  </div>
  <div
    class="absolute parallax-layer"
    data-depth="0.25"
    style="left: 80%; top: 50%; transition: transform 0.2s ease-out;"
    id="purple-layer"
  >
    <img
      alt="Elemento pÃºrpura"
      loading="lazy"
      width="180"
      height="120"
      decoding="async"
      data-nimg="1"
      class="select-none pointer-events-none"
      style="color: transparent; object-fit: contain;"
      src="/images/mask-group-1.png"
    />
  </div>

  <div id="svg-instances-container"></div>

  <svg
    id="parallax-svg-template"
    xmlns="http://www.w3.org/2000/svg"
    width="172"
    height="172"
    viewBox="0 0 172 172"
    fill="none"
    class="absolute pointer-events-none parallax-layer"
    style="display: none; z-index:1; transition: transform 0.2s ease-out;"
  >
    <defs>
      <filter
        id="filter0_f_tpl"
        x="0"
        y="0"
        width="172"
        height="172"
        filterUnits="userSpaceOnUse"
        color-interpolation-filters="sRGB"
      >
        <feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood>
        <feBlend
          mode="normal"
          in="SourceGraphic"
          in2="BackgroundImageFix"
          result="shape"></feBlend>
        <feGaussianBlur
          stdDeviation="20"
          result="effect1_foregroundBlur_225_156"></feGaussianBlur>
      </filter>
      <filter
        id="filter1_f_tpl"
        x="64.6"
        y="64.6"
        width="42.8"
        height="42.8"
        filterUnits="userSpaceOnUse"
        color-interpolation-filters="sRGB"
      >
        <feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood>
        <feBlend
          mode="normal"
          in="SourceGraphic"
          in2="BackgroundImageFix"
          result="shape"></feBlend>
        <feGaussianBlur
          stdDeviation="4.2"
          result="effect1_foregroundBlur_225_156"></feGaussianBlur>
      </filter>
    </defs>
    <g filter="url(#filter0_f_tpl)">
      <circle cx="86" cy="86" r="46" fill="#00FFF9"></circle>
    </g>
    <g filter="url(#filter1_f_tpl)">
      <circle cx="86" cy="86" r="13" fill="white"></circle>
    </g>
  </svg>
</div>

<script define:vars={{ svgInstancesData }}>
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.getElementById("parallax-hero-container");
    if (!container) {
      console.error("Parallax container not found!");
      return;
    }

    const strength = 140; // Ajusta este valor para controlar la velocidad de movimiento parallax
    const svgTemplate = document.getElementById("parallax-svg-template");
    const svgInstancesContainer = document.getElementById(
      "svg-instances-container",
    );

    if (!svgTemplate || !svgInstancesContainer) {
      console.error("SVG template or instances container not found!");
      return;
    }

    // --- SVG Cloning (no changes here) ---
    svgInstancesData.forEach((data) => {
      const clone = svgTemplate.cloneNode(true);
      clone.id = `parallax-svg-instance-${data.idSuffix}`;
      clone.style.display = "";
      clone.style.top = data.top;
      clone.style.left = data.left;
      clone.style.opacity = data.opacity;
      clone.dataset.depth = data.depth.toString();

      const filter0 = clone.querySelector("#filter0_f_tpl");
      const filter1 = clone.querySelector("#filter1_f_tpl");
      const newFilter0Id = `filter0_f_${data.idSuffix}`;
      const newFilter1Id = `filter1_f_${data.idSuffix}`;

      if (filter0) filter0.id = newFilter0Id;
      if (filter1) filter1.id = newFilter1Id;

      const gElements = clone.querySelectorAll("g[filter]");
      gElements.forEach((g) => {
        const currentFilterUrl = g.getAttribute("filter");
        if (currentFilterUrl === "url(#filter0_f_tpl)") {
          g.setAttribute("filter", `url(#${newFilter0Id})`);
        } else if (currentFilterUrl === "url(#filter1_f_tpl)") {
          g.setAttribute("filter", `url(#${newFilter1Id})`);
        }
      });
      svgInstancesContainer.appendChild(clone);
    });
    // --- End SVG Cloning ---

    const layers = Array.from(container.querySelectorAll(".parallax-layer"));

    // Define floating parameters for specific layers
    const floatingConfigs = {
      "blue-layer": {
        ampX: 8,
        ampY: 10,
        speedX: 0.0003,
        speedY: 0.00035,
        phaseX: 0,
        phaseY: Math.PI / 2,
      },
      "cyan-layer": {
        ampX: 6,
        ampY: 8,
        speedX: 0.00025,
        speedY: 0.0004,
        phaseX: Math.PI / 4,
        phaseY: 0,
      },
      "purple-layer": {
        ampX: 10,
        ampY: 7,
        speedX: 0.00032,
        speedY: 0.00028,
        phaseX: Math.PI,
        phaseY: Math.PI / 3,
      },
    };

    const initialTransforms = layers.map((layer) => {
      const currentTransform = layer.style.transform || "";
      let baseX = 0,
        baseY = 0;
      let usesCalcX = false,
        usesCalcY = false;
      let otherTransforms = "";

      if (currentTransform) {
        const translateMatch = currentTransform.match(
          /translate\(\s*([^,]+?)\s*,\s*([^)]+?)\s*\)/,
        );
        if (translateMatch) {
          const xValStr = translateMatch[1].trim();
          const yValStr = translateMatch[2].trim();

          const calcXRegex = /calc\(\s*-50%\s*\+\s*(-?[\d\.]+\s*px\s*)\)/;
          const calcXMatch = xValStr.match(calcXRegex);
          if (calcXMatch && calcXMatch[1]) {
            usesCalcX = true;
            baseX = parseFloat(calcXMatch[1]);
          } else if (xValStr.endsWith("px")) {
            baseX = parseFloat(xValStr);
          }

          const calcYRegex = /calc\(-50%\s*\+\s*(-?[\d\.]+px)\)/;
          const calcYMatch = yValStr.match(calcYRegex);
          if (calcYMatch && calcYMatch[1]) {
            usesCalcY = true;
            baseY = parseFloat(calcYMatch[1]);
          } else if (yValStr.endsWith("px")) {
            baseY = parseFloat(yValStr);
          }
          otherTransforms = currentTransform
            .substring(translateMatch[0].length)
            .trim();
        } else {
          otherTransforms = currentTransform;
        }
      }

      const item = {
        element: layer,
        baseX,
        baseY,
        usesCalcX,
        usesCalcY,
        otherTransforms,
        depth: parseFloat(layer.dataset.depth) || 0,
      };

      // Add floating config if this layer has one
      if (layer.id && floatingConfigs[layer.id]) {
        item.isFloating = true;
        item.floatConfig = floatingConfigs[layer.id];
      }

      return item;
    });

    let mouseX = window.innerWidth / 2;
    let mouseY = window.innerHeight / 2;
    let rafId = null;

    const handleMouseMove = (e) => {
      mouseX = e.clientX;
      mouseY = e.clientY;
    };

    const animate = () => {
      const time = performance.now();
      const centerX = window.innerWidth / 2;
      const centerY = window.innerHeight / 2;

      // Calculate deltaX, deltaY based on the *current* mouse position
      // This makes the parallax responsive even if the mouse stops moving
      const deltaX = centerX === 0 ? 0 : (mouseX - centerX) / centerX;
      const deltaY = centerY === 0 ? 0 : (mouseY - centerY) / centerY;

      initialTransforms.forEach((item) => {
        const {
          element,
          baseX,
          baseY,
          usesCalcX,
          usesCalcY,
          otherTransforms,
          depth,
          isFloating,
          floatConfig,
        } = item;

        let parallaxMoveX = 0;
        let parallaxMoveY = 0;

        if (depth !== 0 && !isNaN(baseX) && !isNaN(baseY)) {
          parallaxMoveX = deltaX * depth * strength;
          parallaxMoveY = deltaY * depth * strength;
        }

        let floatOffsetX = 0;
        let floatOffsetY = 0;

        if (isFloating && floatConfig) {
          floatOffsetX =
            floatConfig.ampX *
            Math.sin(time * floatConfig.speedX + floatConfig.phaseX);
          floatOffsetY =
            floatConfig.ampY *
            Math.cos(time * floatConfig.speedY + floatConfig.phaseY);
        }

        const finalX = baseX + parallaxMoveX + floatOffsetX;
        const finalY = baseY + parallaxMoveY + floatOffsetY;

        let newTranslateXStr = `${finalX.toFixed(3)}px`;
        let newTranslateYStr = `${finalY.toFixed(3)}px`;

        if (usesCalcX) {
          newTranslateXStr = `calc(-50% + ${finalX.toFixed(3)}px)`;
        }
        if (usesCalcY) {
          newTranslateYStr = `calc(-50% + ${finalY.toFixed(3)}px)`;
        }

        const newTransform = `translate(${newTranslateXStr}, ${newTranslateYStr}) ${otherTransforms}`;
        element.style.transform = newTransform.trim();
      });

      rafId = requestAnimationFrame(animate);
    };

    window.addEventListener("mousemove", handleMouseMove);
    animate(); // Start the animation loop
  });
</script>
